#! /usr/bin/bash

checktable(){
	read -p "Choose Table (name): " TBName
	while [ ! -f $TBName ]
	do
		read -p "ERROR!!!...ENTER A TABLE NAME THAT EXISTS! : " TBName
	done
}
colTypeCompatibiltyUpdate(){
	# check if col type compatible with new value
	if (( $unumType == 1 && $nvalueType == 1))
	then
		((match=1))
	elif (( $unumType == 1 && $nvalueType ==2))
	then
		((match=2))
	elif (($unumType == 2 && $nvalueType == 1))
	then
		((match=1))
	else 
		((match=1))
	fi
}


updateRecords(){

	touch tmp
	touch tmp1
	awk '{if (NR<2) {print}}' $TBName > tmp     #table header to tmp
	awk '{if (NR!=1) {print}}' $TBName > tmp1    #table data to tmp1
	awk -F' ' -v original="$ukey" -v col="$unum" '{ if($col==original) {print NR}}' $TBName >> rowsToUpdate  #rows where key is found
	g=`cat rowsToUpdate`
	echo $g > rowsToUpdate
	g=`wc -w < rowsToUpdate`
	touch tmp2
	for ((j=1; j<=g; j++))
	do
		i=`cut -d' ' -f$j rowsToUpdate`
		((i=i-1))
		awk -F' ' -v original="$ukey" -v col="$unum" -v uvalue="$nvalue" -v row="$i" 'OFS="    " { if($col==original && NR==row) {sub(original,uvalue,$col)}} 1' tmp1 > tmp2
		cat tmp2 > tmp1		
	done
	cat tmp1 >> tmp
	mv tmp $TBName
	rm rowsToUpdate tmp1 tmp2
}

checkcolumn(){
	read -p "Enter column number: " colNum
	while (($colNum > columns || $colNum < 1))
	do
		read -p "($colNum) is an invalid column number!, try again: " colNum
	done
}

checktype(){
	while (($colNum > $columns || $colNum < 1))
    do
    	read -p "($colNum) is an invalid column number, try again: " colNum
		if (($colNum > 0))
		then
			if ((`cut -d' ' -f$colNum .$TBName.h`))
			then
				if ((`cut -d' ' -f$colNum .$TBName.h` != 1))
				then
					read -p "Column ($colNum)'s type is not INT, try again: " colNum
				fi
			fi
		fi
	done
}

shopt -s extglob
export LC_COLLATE=C

select menuItem in "Create Table" "List Tables" "Drop Table" "Insert Into Table" "Select From Table" "Delete From Table" "Update Table" "Exit"
do
	case $menuItem in
		"Create Table"  )
			read -p "enter table name: " TBName
			#read -p "Choose Table (name): " TBName
			while [ -f $TBName ]
			do
				read -p "Table already exists!!!, please choose a new name: " TBName
			done
			case $TBName in
				(+([[:upper:][:digit:][:lower:]]) )
					((validName=1))
						;;
				* )
					((validName=2))
						;;
			esac
			while ((validName==2))
			do
				read -p "Invalid table Name, proper name can only include letters and numbers, try again: " TBName
				case $TBName in
				(+([[:upper:][:digit:][:lower:]]) )
					((validName=1))
						;;
				* )
					((validName=2))
						;;
				esac
			done
			touch $TBName
			touch .$TBName.h
			read -p "enter number of columns: " Ncolumns
			for ((i=1; i<$Ncolumns+1; i++))
			do
				if (($i == 1))
				then
					read -p "enter primary key column name: " colName
					case $colName in
					(+([[:upper:][:digit:][:lower:]]) )
						((validName=1))
							;;
					* )
						((validName=2))
							;;
					esac
					while ((validName==2))
					do
						read -p "Invalid column Name, proper name can only include letters and numbers, try again: " colName
						case $colName in
						(+([[:upper:][:digit:][:lower:]]) )
							((validName=1))
								;;
						* )
							((validName=2))
								;;
						esac
					done
					read -p "enter primary key column type (1 for int, 2 for string): " colType
				else
					read -p "enter column ($i) name: " colName
					case $colName in
					(+([[:upper:][:digit:][:lower:]]) )
						((validName=1))
							;;
					* )
						((validName=2))
							;;
					esac
					while ((validName==2))
					do
						read -p "Invalid column Name, proper name can only include letters and numbers, try again: " colName
						case $colName in
						(+([[:upper:][:digit:][:lower:]]) )
							((validName=1))
								;;
						* )
							((validName=2))
								;;
						esac
					done
					read -p "enter column type (1 for int, 2 for string): " colType
				fi

				while [ $colType -gt 2 -o $colType -lt 1 ]
				do
					read -p "ERROR!!!...ENTER 1 FOR INT OR 2 FOR STRING!!: " colType
				done
				#touch .$TBName.h
				if [ $i -eq 1 ]
				then
					echo -n "$colName    " > $TBName
					echo -n "$colType " > .$TBName.h
				else
					echo -n "$colName    " >> $TBName
					echo -n "$colType " >> .$TBName.h
				fi
				
			done
			echo -e "\n" >> $TBName
			echo "Table Created successfully"
			#drawTable
				;;
		"List Tables" )
			ls 
				;;

		"Drop Table" )
			ls
			read -p "enter a table name from the above list to delete: " TBName
			if [ -f $TBName ]
			then
				rm $TBName
				rm .$TBName.h
				echo "$TBName has been deleted successfully!"
			else
			 	echo "$TBName doesn't exist"
			fi
				;;
		
		"Insert Into Table" )
			checktable
			columns=`cat .$TBName.h | wc -w`
			read -p "Enter columns numbers (ex: 1 2 3): " input
			num=`echo $input | wc -w`
			# check type of nvalue
			case $input in
				+([0-9 ]) )
					((inputType=1))
						;;
				* )
					((inputType=2))
						;;
			esac
			if (($inputType == 1))
			then 
				z=`echo $input | grep -o 1`
				((z=$?))
			else
				((z=69))
			fi 
			while ((z != 0 || $num > $columns || $num < 1))
			do
				if (($num > $columns || $num < 1))
				then
					read -p "Invalid number of columns in ur input. Enter columns numbers again: " input
				else
					read -p "You must insert a value in primary key field!!... try again: " input
				fi

				num=`echo $input | wc -w`
				case $input in
				+([0-9] ) )
					((inputType=1))
						;;
				* )
					((inputType=2))
						;;
				esac
				if (($inputType == 1))
				then 
					z=`echo $input | grep -o 1`
					((z=$?))
				else
					((z=69))
				fi 
			done

			. /home/omar/DBMS/.insert $input
				;;

		"Select From Table" )
			checktable
			select c in "Select all" "Select specific columns" "Where condition" "sum" "count" "average" "exit select"
			do
				case $c in
					"Select all" ) 
						column -t $TBName
							;;
					"Select specific columns" )
						columns=`cat .$TBName.h | wc -w`
						((x=0))
						while ((x!=2))
						do
							((x=0))
							read -p "Enter columns numbers: " input
							num=`echo $input | wc -w`

							if (($num > $columns || $num < 1))
							then
								while (($num > $columns || $num < 1))
								do
									echo "Invalid number of columns in ur input. Please try again.."
									read -p "Enter columns numbers: " input
									num=`echo $input | wc -w`
								done
							fi
							
							((y=0))
							for ((i = 1; i <= num; i++))
							do
								chk=`echo $input | cut -d' ' -f$i`
								if (($chk > $columns || $chk < 1))
								then
									((x=0))
									echo "You've entered a column number that doesn't exist. Please try again.."
									break
								else
									((y++))
								fi
							done

							if ((y==num))
							then
								((x=2))
							fi
						done

						final="paste "
						for ((i = 1; i <= num; i++))
						do	
							chk=`echo $input | cut -d' ' -f$i`
							awk -v f="$chk" '{ print $f }' $TBName > show$i
							final+=show$i
							final+=" "
						done
						eval $final > finalz
						column -t finalz
						rm show*
						rm finalz
							;;
					"Where condition" )
						columns=`cat .$TBName.h | wc -w`
						checkcolumn
						read -p "Enter where condition value: " val
						touch hamada
						awk -v r="$val" -v c="$colNum" -F' ' '{if(NR==1) {print} else if($c == r){print}}' $TBName > hamada
						column -t hamada
						rm hamada
							;;
					"sum" )
						columns=`cat .$TBName.h | wc -w`
						read -p "Enter column Number to get sum: " colNum
						checktype
						awk -v cn="$colNum" -F' ' 'BEGIN{sum=0;} {if(NR > 1) {sum+=$cn}} END{print "Sum = " sum}' $TBName
							;;						
					"count" ) 
						columns=`cat .$TBName.h | wc -w`
						checkcolumn
						awk -v cf="$colNum" -F' ' 'BEGIN{counter=-1}{if($cf != "Null") {counter++}} END{print "Count = "counter}' $TBName
							;;
					"average" )
						columns=`cat .$TBName.h | wc -w`
						read -p "Enter column Number to get average: " colNum
						checktype
						awk -v cf="$colNum" -F' ' 'BEGIN{sum=0;count=0} { if(NR > 1 && $cf != "Null") {sum+=$cf; count++}} END{avg=sum/count; print "Average = " avg }' $TBName
							;;
					"exit select" )
						break
							;;
							
				esac
			done
				;;		
		"Delete From Table" )
			checktable
			read -p "Enter Keyword to delete rows associated with it: " key
			touch tmp
			touch tmp1
			awk '{if (NR<2) {print}}' $TBName > tmp
			awk '{if (NR!=1) {print}}' $TBName > tmp1 
			sed -i "/$key/d" tmp1
			cat tmp1 >> tmp
			rm tmp1
			mv tmp $TBName
			sed -i '/^$/d' $TBName
			echo "Records deleted successfully"
				;;
				
		"Update Table" )
			checktable
			read -p "Enter Keyword to update: " ukey
			read -p "Enter the number of the column that you wish to update: " unum
			columns=`cat .$TBName.h | wc -w`
			while (($unum > $columns || $unum < 1))
			do
				read -p "Invalid column number, try again: " unum
			done
			read -p "Enter new value for that field: " nvalue
			((match=0))
			((gtg=0))
			until (($match == 1 && $gtg == 1))
			do	
				# check for duplicates if primary key
				if ((unum == 1))
				then
					while [ true ]
					do
						s=`awk -v d="$nvalue" -F' ' '{if(d == $1) {print "1 "}}' $TBName| wc -w`
						if ((s >= 1))
						then
							((gtg=0))
							read -p  "ERROR!! ..... PRIMARY KEY ALREADY EXISTS!!... try again: " nvalue
						else
							((gtg=1))
							# check field type of unum
							unumType=`cut -d' ' -f$unum .$TBName.h`
							# check type of nvalue
							case $nvalue in
								+([0-9]) )
									((nvalueType=1))
										;;
								* )
									((nvalueType=2))
										;;
							esac
							colTypeCompatibiltyUpdate
							if (($match==1))
							then
								break
							else
								read -p "The type of value u entered is not compatible with this field, try again: " nvalue
								((gtg=0))
							fi
						fi
					done
				else
					while [ true ]
					do
						# check field type of unum
						unumType=`cut -d' ' -f$unum .$TBName.h`
						# check type of nvalue
						case $nvalue in
							+([0-9]) )
								((nvalueType=1))
									;;
							* )
								((nvalueType=2))
									;;
						esac
						colTypeCompatibiltyUpdate
						if (($match == 2))
						then
							read -p "The type of value u entered is not compatible with this field, try again: " nvalue
						else
							((gtg=1))
							break
						fi
					done
				fi
			done
			updateRecords
			echo "Records Updated Successfully"
			
				;;
		"Exit" )

			cd ..
			cd .. 
			break
				;;
		* ) echo "ERROR!!!....PLEASE ENTER A VALID OPTION!!:"
				;;
	esac
done
